
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "INPUT INT PRINT STR id strProgram : Declarations StatementsDeclarations : Declarations DeclarationDeclarations :Declaration : Type IdListType : INTType : STRIdList : IdList ',' idIdList : idStatements : Statements StatementStatements : StatementStatement : id '=' ExpStatement : PRINT '(' PrintArgs ')'PrintArgs : PrintArgs ',' PrintArgsPrintArgs : PrintArgPrintArg : strPrintArg : ExpExp : INT '(' Exp ')'Exp : INPUT '(' str ')'"
    
_lr_action_items = {'id':([0,2,3,4,5,6,9,10,11,12,13,16,17,24,27,32,33,],[-3,7,7,-2,-10,13,-5,-6,-9,-4,-8,24,-11,-7,-12,-17,-18,]),'PRINT':([0,2,3,4,5,11,12,13,17,24,27,32,33,],[-3,8,8,-2,-10,-9,-4,-8,-11,-7,-12,-17,-18,]),'INT':([0,2,4,12,13,14,15,24,25,28,],[-3,9,-2,-4,-8,18,18,-7,18,18,]),'STR':([0,2,4,12,13,24,],[-3,10,-2,-4,-8,-7,]),'$end':([1,3,5,11,17,27,32,33,],[0,-1,-10,-9,-11,-12,-17,-18,]),'=':([7,],[14,]),'(':([8,18,19,],[15,25,26,]),',':([12,13,20,21,22,23,24,31,32,33,],[16,-8,28,-14,-15,-16,-7,28,-17,-18,]),'INPUT':([14,15,25,28,],[19,19,19,19,]),'str':([15,26,28,],[22,30,22,]),')':([20,21,22,23,29,30,31,32,33,],[27,-14,-15,-16,32,33,-13,-17,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'Declarations':([0,],[2,]),'Statements':([2,],[3,]),'Declaration':([2,],[4,]),'Statement':([2,3,],[5,11,]),'Type':([2,],[6,]),'IdList':([6,],[12,]),'Exp':([14,15,25,28,],[17,23,29,23,]),'PrintArgs':([15,28,],[20,31,]),'PrintArg':([15,28,],[21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> Declarations Statements','Program',2,'p_Z','compiler_sin.py',7),
  ('Declarations -> Declarations Declaration','Declarations',2,'p_Declarations_list','compiler_sin.py',11),
  ('Declarations -> <empty>','Declarations',0,'p_Declarations_empty','compiler_sin.py',15),
  ('Declaration -> Type IdList','Declaration',2,'p_Declaration','compiler_sin.py',19),
  ('Type -> INT','Type',1,'p_Type_int','compiler_sin.py',23),
  ('Type -> STR','Type',1,'p_Type_str','compiler_sin.py',27),
  ('IdList -> IdList , id','IdList',3,'p_IdList_list','compiler_sin.py',31),
  ('IdList -> id','IdList',1,'p_IdList_single','compiler_sin.py',35),
  ('Statements -> Statements Statement','Statements',2,'p_Statements_list','compiler_sin.py',39),
  ('Statements -> Statement','Statements',1,'p_Statements_single','compiler_sin.py',43),
  ('Statement -> id = Exp','Statement',3,'p_Statements_atrib','compiler_sin.py',47),
  ('Statement -> PRINT ( PrintArgs )','Statement',4,'p_Statements_print','compiler_sin.py',51),
  ('PrintArgs -> PrintArgs , PrintArgs','PrintArgs',3,'p_PrintArgs_list','compiler_sin.py',55),
  ('PrintArgs -> PrintArg','PrintArgs',1,'p_PrintArgs_single','compiler_sin.py',59),
  ('PrintArg -> str','PrintArg',1,'p_PrintArgs_str','compiler_sin.py',63),
  ('PrintArg -> Exp','PrintArg',1,'p_PrintArgs_exp','compiler_sin.py',67),
  ('Exp -> INT ( Exp )','Exp',4,'p_Exp_int','compiler_sin.py',71),
  ('Exp -> INPUT ( str )','Exp',4,'p_Exp_str','compiler_sin.py',75),
]
